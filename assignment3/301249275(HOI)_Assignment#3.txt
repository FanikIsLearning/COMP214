--SET SERVEROUTPUT ON;

--Q1
CREATE OR REPLACE PROCEDURE STATUS_SHIP_SP(
    HOI_IDBASKET IN BB_BASKETSTATUS.IDBASKET%TYPE,
    HOI_DTSTAGE IN DATE,
    HOI_SHIPPER IN BB_BASKETSTATUS.SHIPPER%TYPE,
    HOI_SHIPPINGNUM IN BB_BASKETSTATUS.SHIPPINGNUM%TYPE
)
AS
BEGIN
    INSERT INTO BB_BASKETSTATUS (IDSTATUS, IDBASKET, IDSTAGE, DTSTAGE, SHIPPER, SHIPPINGNUM)
    VALUES (BB_STATUS_SEQ.NEXTVAL, HOI_IDBASKET, 3, HOI_DTSTAGE, HOI_SHIPPER, HOI_SHIPPINGNUM);

    DBMS_OUTPUT.PUT_LINE('Q1. Shipping information has been updated successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Q1. Error occurred: ' || SQLERRM);
END STATUS_SHIP_SP;
/

--Testing
BEGIN
    STATUS_SHIP_SP(3, TO_DATE('20-FEB-12', 'DD-MON-RR'), 'UPS', 'ZW2384YXK4957');
END;
/

--Console result and self-checking
SELECT * FROM BB_BasketStatus WHERE idBasket = 3;

--*******************************************************************************************

--Q2
CREATE OR REPLACE PROCEDURE STATUS_SP(HOI_IDBASKET IN BB_BASKETSTATUS.IDBASKET%TYPE)
IS
    HOI_DTSTAGE BB_BASKETSTATUS.DTSTAGE%TYPE;
    HOI_IDSTAGE BB_BASKETSTATUS.IDSTAGE%TYPE;
    HOI_STATUS VARCHAR2(100);
BEGIN
    SELECT DTSTAGE, IDSTAGE
    INTO HOI_DTSTAGE, HOI_IDSTAGE
    FROM BB_BASKETSTATUS
    WHERE IDBASKET = HOI_IDBASKET
    ORDER BY DTSTAGE DESC
    FETCH FIRST ROW ONLY;

    CASE HOI_IDSTAGE
        WHEN 1 THEN HOI_STATUS := 'Submitted and received';
        WHEN 2 THEN HOI_STATUS := 'Confirmed, processed, sent to shipping';
        WHEN 3 THEN HOI_STATUS := 'Shipped';
        WHEN 4 THEN HOI_STATUS := 'Cancelled';
        WHEN 5 THEN HOI_STATUS := 'Back-ordered';
        ELSE HOI_STATUS := 'Unknown stage';
    END CASE;

    DBMS_OUTPUT.PUT_LINE('Q2. The basket ID ' || HOI_IDBASKET || ' is the most recent status."' || HOI_STATUS || '" recorded on ' || TO_CHAR(HOI_DTSTAGE, 'DD-MON-YYYY'));

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Q2. The basket ID ' || HOI_IDBASKET || ' has no status available ');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Q2. Error occurred: ' || SQLERRM);
END STATUS_SP;
/

--TESTING
BEGIN
    STATUS_SP(4);
    STATUS_SP(6);
END;
/

--*******************************************************************************************

--Q3
CREATE OR REPLACE PROCEDURE PROMO_SHIP_SP (p_date IN DATE) IS
    HOI_MONTH CHAR(3) := 'APR';
    HOI_YEAR NUMBER(4,0) := 2012;
    HOI_PROMOFLAG NUMBER(1,0) := 1;
    HOI_USED CHAR(1);
    
    CURSOR HOI_LIST_CUR IS 
        SELECT IDSHOPPER, MAX(DTCREATED) CREATEDATE, ORDERPLACED
        FROM BB_BASKET
        GROUP BY IDSHOPPER, ORDERPLACED
        HAVING MAX(DTCREATED) < p_date;
    
    HOI_LIST HOI_LIST_CUR%ROWTYPE;
BEGIN
    OPEN HOI_LIST_CUR;
    FETCH HOI_LIST_CUR INTO HOI_LIST;

    WHILE HOI_LIST_CUR%FOUND LOOP
        IF HOI_LIST.ORDERPLACED = 1 THEN
            HOI_USED := 'Y';
        ELSE
            HOI_USED := 'N';
        END IF;

        INSERT INTO bb_promolist
        VALUES (HOI_LIST.IDSHOPPER, HOI_MONTH, HOI_YEAR, HOI_PROMOFLAG, HOI_USED);

        DBMS_OUTPUT.PUT_LINE('Q3. Record for IDSHOPPER: ' || HOI_LIST.IDSHOPPER || ' inserted into BB_PROMOLIST.');
        FETCH HOI_LIST_CUR INTO HOI_LIST;
    END LOOP;

    CLOSE HOI_LIST_CUR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Q3. An error has occurred: ' || SQLERRM);
END PROMO_SHIP_SP;
/


--Testing

BEGIN
    PROMO_SHIP_SP(TO_DATE('2012-02-15', 'YYYY-MM-DD'));
END;
/
--Console Result and self-checking
SELECT * FROM bb_promolist;




--*******************************************************************************************

--Q4

-- Step 1: Create a function that verifies the username and password.
CREATE OR REPLACE FUNCTION VERIFY_LOGON(
    HOI_USERNAME IN BB_SHOPPER.USERNAME%TYPE,
    HOI_PASSWORD IN BB_SHOPPER.PASSWORD%TYPE
)
RETURN VARCHAR2
IS
    HOI_RETURNVALUE VARCHAR2(1) := 'N';
BEGIN
    SELECT 'Y'
    INTO HOI_RETURNVALUE
    FROM BB_SHOPPER
    WHERE USERNAME = HOI_USERNAME
      AND PASSWORD = HOI_PASSWORD;

    DBMS_OUTPUT.PUT_LINE('Q4. STEP 1 - Function executed successfully.');
    RETURN HOI_RETURNVALUE;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Q4. STEP 1 - Logon values are invalid.');
        RETURN HOI_RETURNVALUE;
END VERIFY_LOGON;
/


-- Step 2: Test the function using an anonymous block.
BEGIN
    DBMS_OUTPUT.PUT_LINE('Q4. STEP 2 - Logon verification: ' || VERIFY_LOGON('gma1', 'goofy'));
END;
/

-- Step 3: Create a package that includes the function and packaged variables.
CREATE OR REPLACE PACKAGE LOGIN_PKG
IS
    HOI_PKG_SHOPPERID BB_SHOPPER.IDSHOPPER%TYPE;
    HOI_PKG_ZIPCODE VARCHAR2(3);

    FUNCTION VERIFY_LOGON(
        HOI_USERNAME IN BB_SHOPPER.USERNAME%TYPE,
        HOI_PASSWORD IN BB_SHOPPER.PASSWORD%TYPE
    )
    RETURN VARCHAR2;
END LOGIN_PKG;
/

CREATE OR REPLACE PACKAGE BODY LOGIN_PKG
IS
    FUNCTION VERIFY_LOGON(
        HOI_USERNAME IN BB_SHOPPER.USERNAME%TYPE,
        HOI_PASSWORD IN BB_SHOPPER.PASSWORD%TYPE
    )
    RETURN VARCHAR2
    IS
        HOI_RETURNVALUE VARCHAR2(1) := 'N';
    BEGIN
        SELECT IDSHOPPER, SUBSTR(ZIPCODE, 1, 3)
        INTO HOI_PKG_SHOPPERID, HOI_PKG_ZIPCODE
        FROM BB_SHOPPER
        WHERE USERNAME = HOI_USERNAME
          AND PASSWORD = HOI_PASSWORD;

        HOI_RETURNVALUE := 'Y';
            DBMS_OUTPUT.PUT_LINE('Q4. STEP 3 - Package executed successfully.');
        RETURN HOI_RETURNVALUE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Q4. STEP 3 - Logon values are invalid.');
            RETURN HOI_RETURNVALUE;
    END VERIFY_LOGON;
END LOGIN_PKG;
/

-- Step 4: Test the packaged function using an anonymous block.
BEGIN
    DBMS_OUTPUT.PUT_LINE('Q4. STEP 4 - Packaged Logon verification: ' || LOGIN_PKG.VERIFY_LOGON('gma1', 'goofy'));
END;
/

-- Step 5: Use DBMS_OUTPUT statements in an anonymous block to display the values stored in the packaged variables.
BEGIN
    DBMS_OUTPUT.PUT_LINE('Q4. STEP 5 - Shopper ID: ' || LOGIN_PKG.HOI_PKG_SHOPPERID);
    DBMS_OUTPUT.PUT_LINE('Q4. STEP 5 - Zip code prefix: ' || LOGIN_PKG.HOI_PKG_ZIPCODE);
END;
/

--*******************************************************************************************

--Q5
-- Create a package to hold the tax rates cursor and the function to fetch tax rates.
CREATE OR REPLACE PACKAGE TAX_PKG
IS
    TYPE tax_cursor IS REF CURSOR;

    FUNCTION FETCH_TAX_RATE(HOI_STATE IN BB_TAX.STATE%TYPE) RETURN BB_TAX.TAXRATE%TYPE;
END TAX_PKG;
/

CREATE OR REPLACE PACKAGE BODY TAX_PKG
IS
    FUNCTION FETCH_TAX_RATE(HOI_STATE IN BB_TAX.STATE%TYPE) RETURN BB_TAX.TAXRATE%TYPE
    IS
        HOI_TAXRATE BB_TAX.TAXRATE%TYPE;
        HOI_TAXCUR tax_cursor;
        HOI_TAXREC BB_TAX%ROWTYPE;
    BEGIN
        OPEN HOI_TAXCUR FOR
        SELECT *
        FROM BB_TAX
        WHERE STATE = HOI_STATE;

        FETCH HOI_TAXCUR INTO HOI_TAXREC;
        IF HOI_TAXCUR%NOTFOUND THEN
            DBMS_OUTPUT.PUT_LINE('Q5. No tax rate found for state: ' || HOI_STATE);
            CLOSE HOI_TAXCUR;
            RETURN NULL;
        ELSE
            HOI_TAXRATE := HOI_TAXREC.TAXRATE;
            CLOSE HOI_TAXCUR;
            RETURN HOI_TAXRATE;
        END IF;
    END FETCH_TAX_RATE;
END TAX_PKG;
/

-- Testing the function using an anonymous block.
DECLARE
    HOI_TAXRATE BB_TAX.TAXRATE%TYPE;
BEGIN
    HOI_TAXRATE := TAX_PKG.FETCH_TAX_RATE('NC');
    DBMS_OUTPUT.PUT_LINE('Q5. The tax rate for NC is: ' || TRIM(TO_CHAR(HOI_TAXRATE, 'L0D00')));
END;
/
